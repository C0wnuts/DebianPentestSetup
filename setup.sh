#!/bin/bash

## Need to be launched with non-root sudoer user 

function echoG()
{
	green='\033[0;32m'
	clear='\033[0m'
	echo -e "${green}[*] ${1}${clear}"
}

function echoB()
{
	blue='\033[0;36m'
	clear='\033[0m'
	echo -e "${blue}[i] ${1}${clear}"
}

function echoR()
{
	red='\033[0;31m'
	clear='\033[0m'
	echo -e "${red}[!] ${1}${clear}"
}

function gitCloneBulk()
{
	echoG "Get tools from GIT"
	git clone https://github.com/superkojiman/onetwopunch.git /opt/onetwopunch
	git clone https://github.com/21y4d/nmapAutomator.git /opt/nmapAutomator
	git clone https://github.com/vulnersCom/nmap-vulners.git /opt/nmap-vulners
	git clone https://github.com/offensive-security/exploitdb.git /opt/exploit-database
	git clone https://gitlab.com/kalilinux/packages/enum4linux.git /opt/enum4linux

	git clone https://github.com/drwetter/testssl.sh.git /opt/web/testssl
	git clone https://github.com/rastating/joomlavs.git /opt/web/joomlavs
	git clone https://github.com/aboul3la/Sublist3r.git /opt/web/Sublist3r
	git clone https://github.com/maurosoria/dirsearch.git /opt/web/dirsearch
	git clone https://github.com/C0wnuts/webExploitPages.git /opt/web/webExploitPages
	git clone https://github.com/internetwache/GitTools.git /opt/web/gitTools
	git clone https://github.com/ticarpi/jwt_tool.git /opt/web/jwt_tool
	git clone https://github.com/00theway/Ghostcat-CNVD-2020-10487.git /opt/web/Ghostcat
	git clone https://github.com/immunIT/drupwn.git /opt/web/drupwn
	git clone https://github.com/anouarbensaad/vulnx.git /opt/web/vulnx
	git clone https://github.com/sullo/nikto.git /opt/web/nikto
	git clone https://github.com/laramies/theHarvester.git /opt/web/theHarvester
	git clone https://github.com/Dheerajmadhukar/4-ZERO-3 /opt/web/4-ZERO-3
	mkdir /opt/web/findomain && cd /opt/web/findomain
	wget -O findomain https://github.com/findomain/findomain/releases/latest/download/findomain-linux && chmod +x ./findomain
	sudo ln -sfnv /opt/web/findomain/findomain /usr/local/bin/findomain

	git clone https://github.com/trustedsec/unicorn.git /opt/internal/unicorn
	git clone https://github.com/lgandx/Responder.git /opt/internal/responder
	git clone https://github.com/SySS-Research/Seth.git /opt/internal/seth
	
	git clone https://github.com/m8r0wn/CrossLinked.git /opt/osint/crosslinked
	git clone https://github.com/initstring/linkedin2username.git /opt/osint/linkedin2username

	git clone https://github.com/k4m4/dymerge.git /opt/wordlist/dymerge
	git clone https://github.com/1N3/IntruderPayloads.git /opt/wordlist/IntruderPayloads
	git clone https://github.com/C0wnuts/FinalDics.git /opt/wordlist/FinalDics
	git clone https://github.com/fuzzdb-project/fuzzdb.git /opt/wordlist/fuzzdb
	git clone https://github.com/danielmiessler/SecLists.git /opt/wordlist/SecList

	git clone https://github.com/mzet-/linux-exploit-suggester.git /opt/privEscTools/linux-exploit-suggester-sh
	git clone https://github.com/jondonas/linux-exploit-suggester-2.git /opt/privEscTools/linux-exploit-suggester-pl
	git clone https://github.com/carlospolop/privilege-escalation-awesome-scripts-suite.git /opt/privEscTools/privilege-escalation-awesome-scripts-suite
	git clone https://github.com/diego-treitos/linux-smart-enumeration.git /opt/privEscTools/linux-smart-enumeration
	git clone https://github.com/rebootuser/LinEnum.git /opt/privEscTools/LinEnum
	git clone https://github.com/AlessandroZ/BeRoot.git /opt/privEscTools/BeRoot
	git clone https://github.com/sleventyeleven/linuxprivchecker.git /opt/privEscTools/linuxprivchecker
	git clone https://github.com/pentestmonkey/unix-privesc-check.git /opt/privEscTools/unix-privesc-check
	git clone https://github.com/TH3xACE/SUDO_KILLER.git /opt/privEscTools/SUDO_KILLER

}

function installGo()
{
python3 - << 'EOT'
from bs4 import BeautifulSoup
import requests, subprocess
from requests.adapters import HTTPAdapter
from requests.packages.urllib3.util.retry import Retry

domain = "https://go.dev"
url = "{}/dl/".format(domain)
headers    = {
    'User-Agent':"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0",
    "Host":"go.dev"
}

retry_strategy = Retry(
    total = 30, 
    backoff_factor = 0.2, 
    allowed_methods = ["GET"]
)
adapter = HTTPAdapter(max_retries=retry_strategy)
http    = requests.Session()
http.mount("https://", adapter)


response = http.get(url, allow_redirects=True)
response = response.text.encode('utf-8')
soup = BeautifulSoup(response, 'html.parser')

downloadLink = soup.select_one("a[href*=linux]").get("href")
downloadLinkSplit = downloadLink.split("/")
downloadFile = downloadLinkSplit[len(downloadLinkSplit)-1]
url = "{}{}".format(domain,downloadLink)

response = http.get(url, stream=True)
if response.status_code == 200:
    with open("/tmp/{}".format(downloadFile), 'wb') as f:
        f.write(response.raw.read())

subprocess.run(["sudo","rm", "-rf", "/usr/local/go", "&&", ])
subprocess.run(["sudo","tar", "-C", "/usr/local", "-xzf", f"/tmp/{downloadFile}"])
subprocess.run(["sudo","rm",f"/tmp/{downloadFile}"])
EOT

export PATH=$PATH:/usr/local/go/bin
export GOPATH=/opt/go
}

function pipInstallBulk()
{
	echoG "Install python dependencies for all tools from GIT"
	pip3 install pipenv pycryptodomex termcolor cprint pycryptodomex requests colorama droopescan
	pip3 install pylnk3 --force
	sudo pip3 install pipenv pycryptodomex termcolor cprint pycryptodomex requests colorama droopescan
	sudo pip3 install pylnk3 --force
	pip3 install -r /opt/osint/crosslinked/requirements.txt --force
	pip3 install -r /opt/osint/linkedin2username/requirements.txt --force
	pip3 install -r /opt/web/Sublist3r/requirements.txt --force
	pip3 install -r /opt/web/drupwn/requirements.txt --force
	pip3 install -r /opt/web/dirsearch/requirements.txt --force
	pip3 install -r /opt/web/theHarvester/requirements/base.txt --force
	pip3 install -r /opt/internal/opt/internal/seth/requirements.txt --force
}

function installApkTool()
{
	echoG "Install apktool"
    wget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool -P /opt/
    URL=$(curl -f -L https://bitbucket.org/iBotPeaches/apktool/downloads/ | grep -Eo "/.*.jar\"" | head -n 1 | sed 's/.$//')
    wget "https://bitbucket.org$URL" -P /opt/
    sudo mv /opt/${URL##*/} /opt/apktool.jar
    sudo mv /opt/apktool* /usr/local/bin
    sudo chmod +x /usr/local/bin/apktool*
}

function downloadBurpSuitePro()
{
	echoG "Download BurpSuitePro in /opt/burp"
	mkdir /opt/burp && cd /opt/burp
	curl "https://portswigger.net/burp/releases/download?product=pro&type=Linux" --output burp.sh && chmod +x ./burp.sh
}

function nmapAutomatorSetup()
{
	echoG "Setup nmapAutomator & install some nse files"
	chmod +x /opt/nmapAutomator.sh
	cd /opt/nmap-vulners
	sudo cp *.nse /usr/share/nmap/scripts
	sudo nmap --script-updatedb
	cd /opt
	rm -rf /opt/nmap-vulners
}

function exploitdbSetup()
{
	sudo ln -sf /opt/exploit-database/searchsploit /usr/local/bin/searchsploit
	cp -n /opt/exploit-database/.searchsploit_rc ~/
}

function zshSetup()
{
	echoG "Setup zsh"
	sh -c "$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)"
	chsh -s $(which zsh)
	sudo sed -i 's/ZSH_THEME="robbyrussell"/ZSH_THEME="bira"/' /root/.zshrc
	sudo sed -i 's/plugins=(git)/plugins=(git z)/' /root/.zshrc
	sudo echo 'export OPENSSL_CONF=/etc/ssl/' >> /root/.zshrc
	sudo echo 'export PATH=$PATH:/usr/local/go/bin:/snap/bin' >> /root/.zshrc
	echo 'zsh setup'
}


function bashrcSetup()
{
	echoG "Setup bashrc"
	echo 'export PATH=$PATH:/usr/local/go/bin:/opt/go/bin' >> ~/.bashrc
	echo 'export OPENSSL_CONF=/etc/ssl/' >> ~/.bashrc
	echo 'export GOPATH=/opt/go' >> ~/.bashrc

	echo '' | sudo tee -a /root/.bashrc
	echo 'export GOPATH=/opt/go' | sudo tee -a /root/.bashrc
	echo 'export OPENSSL_CONF=/etc/ssl/' | sudo tee -a /root/.bashrc
	echo 'export PATH=$PATH:/usr/local/go/bin:/opt/go/bin' | sudo tee -a /root/.bashrc
}

function sublimetext()
{
	echoG "Setup sublimetext"
	wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -
	echo "deb https://download.sublimetext.com/ apt/stable/" | sudo tee /etc/apt/sources.list.d/sublime-text.list
	sudo apt update && sudo apt install sublime-text -y
	sudo ln -s /opt/sublime_text/sublime_text /usr/local/bin/subl
}

function responderSetup()
{
	echoG "Setup responder for ntlmrelay"
	sed -i 's/SMB = On/SMB = Off/' /opt/internal/responder/Responder.conf
	sed -i 's/HTTP = On/HTTP = Off/' /opt/internal/responder/Responder.conf
}

function impacketSetup()
{
	echoG "Install and setup impacket"
    curl -s https://api.github.com/repos/SecureAuthCorp/impacket/releases/latest \
    | grep "browser_download_url.*.tar.gz" \
    | cut -d '"' -f 4 \
    | wget -qi - -O impacket.tar.gz && \
    tar -zxvf impacket.tar.gz -C /opt/internal
    rm ./impacket.tar.gz
    impacketname=$(ls /opt/internal | grep impacket)
    cd /opt/internal/$impacketname
    pip3 install -r ./requirements.txt --force
    sudo pip3 install -r ./requirements.txt --force
    python3 -m pip install .
    sudo python3 -m pip install .
}

function clickjackingPage()
{
	echo '<iframe src="https://xxxx.com" width="1440" height="860"></iframe>' | sudo tee -a /var/www/html/clickjacking.html
}

function vulnx()
{
	echoG "Setup vulnx"
	cd /opt/web/vulnx
	chmod +x ./install.sh
	./install.sh
}

function amassConfig()
{
	USER=$(whoami)
	wget https://raw.githubusercontent.com/OWASP/Amass/master/examples/config.ini -P ~/.config/amass
}

function crackmapexec()
{
	sudo docker pull byt3bl33d3r/crackmapexec:latest
}

function initopt()
{
	echoG "Setup opt directory"
	USER=$(whoami)
	sudo mkdir /opt /opt/web /opt/internal /opt/privEscTools /opt/wordlist /opt/osint /opt/go
	sudo chown -R $USER:$USER /opt
}

echoG "Set keyboard to fr"

echoG "Setup internet access"
i=0
while ((i!=1))
do
	if ping -q -c 1 -W 1 8.8.8.8 >/dev/null; then
	  echoG "IPv4 is up"
	  i=1
	else
	  echoR "IPv4 is down"
	  sleep 5
	fi
done

echoG "Check current user"
if [ "root" == $USER ]; then
        echoR "This script must be run as non-root user and without sudo prefix"
        exit 1
fi

prompt=$(sudo -nv 2>&1)
if [ $? -eq 0 ]; then
        echoG "${USER} has sudoer rights"
elif echo $prompt | grep -q '^sudo:'; then
        echoG "${USER} has sudoer rights"
else
        echoG "Add ${USER} to sudoers"
        su root -c "sudo usermod -aG sudo ${USER}"
        echoB "The system will reboot"
        echoB "You need to run again this script when the system is fully rebooted"
        secs=$((5))
        while [ $secs -gt 0 ]; do
                echo -ne "$secs\033[0K\r"
                sleep 1
                : $((secs--))
        done
        systemctl reboot
fi

echoG "Upgrade packages"
sudo apt update && sudo apt full-upgrade -y
echoG "Install essentials"
sudo apt install build-essential dkms linux-headers-$(uname -r) \
curl tmux zsh aha jq gdebi tree keepass2 \
gcc-9-base gcc python3-pip python3-venv remmina npm moreutils \
autoconf libpcap-dev libpq-dev zlib1g-dev libsqlite3-dev postgresql postgresql-client \
ruby ruby-dev gem libssl-dev libffi-dev python-dev ftp openvpn \
patch liblzma-dev libcurl4-openssl-dev apt-transport-https maven \
ca-certificates curl gnupg2 software-properties-common default-jdk \
ffuf dsniff adb snapd dos2unix openssh-server net-tools apache2 tcpdump \
proxychains ldap-utils libxml2 libxml2-dev libxslt1-dev libgmp-dev freerdp2-x11 -y
echoG "Install snap"
sudo snap install core
echoG "Install pip tools & dependencies"
pip3 install wheel install frida frida-tools objection bs4
sudo pip3 install wheel install frida frida-tools objection bs4
pip3 install netifaces --force-reinstall
sudo pip3 install netifaces --force-reinstall
sudo apt install ideviceinstaller python3-imobiledevice libimobiledevice-utils python3-plist ifuse usbmuxd libusbmuxd-tools -y
echoG "Install go"
installGo
initopt

echoG "Install docker & docker-compose"
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
sudo apt-get update
sudo apt install docker-ce docker-ce-cli containerd.io docker-compose -y
sudo systemctl enable docker

echoG "Install tools from apt"
sudo apt install nmap smbmap sqlmap whatweb wafw00f ike-scan hping3 hydra arp-scan -y
sudo snap install amass
sudo snap install john-the-ripper
go install github.com/tomnomnom/waybackurls@latest
go install github.com/OJ/gobuster/v3@latest
go install github.com/tomnomnom/assetfinder@latest
go install github.com/projectdiscovery/nuclei/v2/cmd/nuclei@latest
amassConfig
crackmapexec
nucleiSetup
sublimetext
gem install evil-winrm
gem install wpscan
clickjackingPage

# Add all github tools
gitCloneBulk
wget https://github.com/brannondorsey/naive-hashcat/releases/download/data/rockyou.txt -P /opt/wordlist/
cd /opt/web/joomlavs/
gem install bundler && bundle install
bundle update --bundler
pipInstallBulk
responderSetup
impacketSetup
nmapAutomatorSetup
exploitdbSetup
installApkTool
vulnx
downloadBurpSuitePro

cd /tmp
curl https://raw.githubusercontent.com/rapid7/metasploit-omnibus/master/config/templates/metasploit-framework-wrappers/msfupdate.erb > msfinstall && \
chmod 755 msfinstall && ./msfinstall
rm ./msfinstall
msfdb init
sudo service postgresql start && sudo systemctl enable postgresql

bashrcSetup
#zshSetup

echoG "reboot machine"
sudo reboot
